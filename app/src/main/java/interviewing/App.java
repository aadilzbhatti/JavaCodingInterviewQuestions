/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package interviewing;

import interviewing.datastructures.trees.BinaryTree;
import interviewing.datastructures.trees.TreeNode;
import interviewing.datastructures.trees.TreeQuestions;

import java.util.Arrays;

public class App {
    public static void main(String[] args) {
//        LookAndSay.lookAndSay(10);

//        TreeNode root = new TreeNode(8,
//                new TreeNode(4,
//                        new TreeNode(2,
//                                new TreeNode(1, null, null),
//                                new TreeNode(3, null, null)
//                        ), new TreeNode(6,
//                        new TreeNode(5, null, null),
//                        new TreeNode(7, null, null)
//                )
//                ),
//                new TreeNode(12,
//                        new TreeNode(10,
//                                new TreeNode(9, null, null),
//                                new TreeNode(11, null, null)
//                        ),
//                        new TreeNode(14,
//                                new TreeNode(13, null, null),
//                                new TreeNode(15, null, null)
//                        )
//                )
//        );

//        root.preOrderTraversal(System.out::println);
//        root.printTree();

//        TreeNode root = (TreeNode) TreeQuestions.buildFromSortedArray(new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 });
//        root.printTree();

//        GraphNode root = new GraphNode(0);
//        GraphNode n1 = new GraphNode(1);
//        GraphNode n2 = new GraphNode(2);
//        GraphNode n3 = new GraphNode(3);
//        GraphNode n4 = new GraphNode(4);
//        GraphNode n5 = new GraphNode(5);
//
//        root.addChild(n1);
//        root.addChild(n4);
//        root.addChild(n5);
//        n1.addChild(n4);
//        n1.addChild(n3);
//        n3.addChild(n2);
//        n2.addChild(n1);
//        n3.addChild(n4);
//
//        root.breadthFirstSearch(System.out::println);

        BinaryTree root = new TreeNode(4,
                new TreeNode(2,
                        new TreeNode(1, null, null),
                        new TreeNode(3, null, null)
                ), new TreeNode(6,
                    new TreeNode(5, null, null),
                    new TreeNode(7, null, null)
                )
        );

        System.out.println(TreeQuestions.allPossibleBstSequences(root));
    }
}
